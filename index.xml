<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matt Allan</title>
    <link>http://mattallan.org/</link>
    <description>Recent content on Matt Allan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jan 2018 16:10:45 -0500</lastBuildDate>
    
	<atom:link href="http://mattallan.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[meta] Moving From Jekyll to Hugo</title>
      <link>http://mattallan.org/posts/moving-to-hugo/</link>
      <pubDate>Sat, 27 Jan 2018 16:10:45 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/moving-to-hugo/</guid>
      <description>Why This site is hosted on github pages and until today was built using Jekyll. I would push commits and github would rebuild the site for me. Locally I pulled in the github-pages gem so I could preview my site (you can read more about that here). Last week I got a notification that one of my gems had a security vulnerability so I updated everything. I had to update my ruby version which made bundler happy but broke vim.</description>
    </item>
    
    <item>
      <title>Protobuf PHP Services</title>
      <link>http://mattallan.org/posts/protobuf-php-services/</link>
      <pubDate>Sat, 27 Jan 2018 14:59:42 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/protobuf-php-services/</guid>
      <description>Introduction Lately I&amp;rsquo;ve been investigating Protobuf as a replacement for JSON RPC services. If you aren&amp;rsquo;t familiar with Protobuf, it&amp;rsquo;s a language neutral serialization format from Google. It&amp;rsquo;s most commonly associated with Google&amp;rsquo;s RPC framework GRPC but it can be used standalone too. In this guide we are going to build a simple calculator RPC service using nothing but the Protobuf compiler and PHP.
Example Code The example code for this article is available here.</description>
    </item>
    
    <item>
      <title>Understanding Dependency Injection Containers Part II - Autowiring</title>
      <link>http://mattallan.org/posts/dependency-injection-containers-part-ii-autowiring/</link>
      <pubDate>Thu, 01 Sep 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/dependency-injection-containers-part-ii-autowiring/</guid>
      <description>Introduction This article is a follow up to Understanding Dependency Injection Containers. In the first part we learned how a basic dependency injection (DI) container works, and wrote our own closure based container. This part is going to focus on autowiring.
Autowiring Our container is pretty helpful, but it&amp;rsquo;s still a bit annoying to use. Having to write $container-&amp;gt;set(...) for every dependency is tiring. Wouldn&amp;rsquo;t it be nice if the container could just figure out what you wanted?</description>
    </item>
    
    <item>
      <title>Setting the Guard Per Route in Laravel</title>
      <link>http://mattallan.org/posts/setting-the-guard-per-route-in-laravel/</link>
      <pubDate>Fri, 22 Jul 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/setting-the-guard-per-route-in-laravel/</guid>
      <description>edit you will be able to do this natively in 5.3. The auth middleware will set the default guard and the user resolver.
I&amp;rsquo;ve been working with Laravel for awhile, and the authentication that comes out of the box is pretty awesome.
Laravel let&amp;rsquo;s you setup different guards which authenticate the user differently. You might have a web guard that uses the session and cookies and an api guard that uses an OAuth token.</description>
    </item>
    
    <item>
      <title>Understanding Dependency Injection Containers</title>
      <link>http://mattallan.org/posts/dependency-injection-containers/</link>
      <pubDate>Fri, 15 Jul 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/dependency-injection-containers/</guid>
      <description>Introduction If you are writing modern PHP, you will run across dependency injection a lot. Basically all dependency injection means is that if an object needs something, you pass it in. So if you have a class like this:
&amp;lt;?php class UsersController { public function index() { $repository = new UserRepository( new DbAdapter( &amp;#39;mysql:dbname=testdb;host=127.0.0.1&amp;#39;, &amp;#39;dbuser&amp;#39;, &amp;#39;dbpass&amp;#39; ) ); $users = $repository-&amp;gt;all(); return json_encode($users); } }&amp;lt;?php $controller = new UsersController(); &amp;hellip;you would pass in (inject) the object it needs (the dependency) instead of instantiating it in the class.</description>
    </item>
    
    <item>
      <title>JSON Schema References</title>
      <link>http://mattallan.org/posts/json-schema-references/</link>
      <pubDate>Thu, 05 May 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/json-schema-references/</guid>
      <description>Introduction I recently wrote a validator for JSON Schema. One of the hardest parts to figure out was how to resolve references, so I figured I would write a quick post explaining what I learned.
References A JSON reference is a way to reference another part of the document, or another schema. There is actually a IETF draft for it, so it isn&amp;rsquo;t specific to JSON Schema.
A simple example would look like this:</description>
    </item>
    
    <item>
      <title>Don&#39;t Use Illuminate Support</title>
      <link>http://mattallan.org/posts/dont-use-illuminate-support/</link>
      <pubDate>Thu, 21 Apr 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/dont-use-illuminate-support/</guid>
      <description>tl;dr: If you are writing a framework agnostic package, don&amp;rsquo;t use illuminate/support.
A lot of framework agnostic Composer packages (PHP) pull in illuminate/support, which contains helper functions and general purpose code used by the Laravel framework. Usually it&amp;rsquo;s because the support package has nice helper functions like array_get, or because of the nice collection class.
The helpers functions are nice, but I don&amp;rsquo;t think developers appreciate the ramifications of choosing to pull that package in.</description>
    </item>
    
    <item>
      <title>Github Pages Best Practices</title>
      <link>http://mattallan.org/posts/github-pages-best-practices/</link>
      <pubDate>Tue, 12 Apr 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/github-pages-best-practices/</guid>
      <description>Introduction Github Pages is a really nice (free) service for hosting static HTML websites. You can push simple HTML files, but you can also push a Jekyll site and Github will build it. This site is built with Jekyll and hosted on Github Pages, and I use it for all of my code projects too.
The Jekyll setup for Github pages is a little weird, and there are a lot of gotchas to making it run correctly.</description>
    </item>
    
    <item>
      <title>IIFE LIFE - IIFE In PHP</title>
      <link>http://mattallan.org/posts/iife-life-iife-in-php/</link>
      <pubDate>Tue, 12 Apr 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/iife-life-iife-in-php/</guid>
      <description>Introduction An IIFE (pronounced iffy) is an immediately invoked functional expression. It&amp;rsquo;s a popular pattern in Javascript, but not widely used in PHP.
A Javascript IIFE looks like this:
(function () { // code })(); As of PHP7, a PHP IIFE looks like this:
&amp;lt;?php (function () { // code })(); Exactly the same! Here&amp;rsquo;s a running example.
What Changed The change is in nikic&amp;rsquo;s Uniform Variable Syntax RFC. I didn&amp;rsquo;t see this RFC prominently mentioned in any of the new features posts, but it&amp;rsquo;s pretty great.</description>
    </item>
    
    <item>
      <title>Automatically Run Unit Tests With entr</title>
      <link>http://mattallan.org/posts/automatically-run-unit-tests-with-entr/</link>
      <pubDate>Thu, 31 Mar 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/automatically-run-unit-tests-with-entr/</guid>
      <description>Introduction I do a lot of test driven development, and generally use tests a lot when I&amp;rsquo;m writing code. It&amp;rsquo;s nice to have your tests automatically run every time you save a file, so you know if you broke something.
This guide will show you how to make that happen. Since I mostly do PHP development, this guide will focus on using PHPUnit, but this would work for any test runner.</description>
    </item>
    
    <item>
      <title>REST and DDD</title>
      <link>http://mattallan.org/posts/rest-and-ddd/</link>
      <pubDate>Wed, 30 Mar 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/rest-and-ddd/</guid>
      <description>I recently gave a talk at the Laravel SF meetup about hexagonal architecture in PHP, and demonstrated it using Laravel. Here&amp;rsquo;s the slide deck I made:
 
While living in California I worked on a REST API that took a lot of ideas from Domain Driven Design (DDD) and Hexagonal Architecture. The talk was mostly an introduction to Hexagonal architecture, but it also covers some valuable lessons I learned about combining DDD and REST.</description>
    </item>
    
    <item>
      <title>Why you should be using annotations (with Doctrine)</title>
      <link>http://mattallan.org/posts/why-you-should-be-using-annotations/</link>
      <pubDate>Fri, 19 Feb 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/why-you-should-be-using-annotations/</guid>
      <description>Introduction I do a lot of PHP development with Doctrine ORM. If you aren&amp;rsquo;t familiar with it, it&amp;rsquo;s a library for making your PHP objects talk to the database. So if you have a class like this:
&amp;lt;?php class Article { protected $id; protected $title; } &amp;hellip;and a table like this:
mysql&amp;gt; describe articles; +-------+--------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+--------------+------+-----+---------+-------+ | id | int(11) | NO | | NULL | | | title | varchar(255) | NO | | NULL | | +-------+--------------+------+-----+---------+-------+ &amp;hellip;then you need a way to map them to each other, and say that the table articles cooresponds to the class Article, the id field cooresponds to the id property, etc.</description>
    </item>
    
    <item>
      <title>Camp</title>
      <link>http://mattallan.org/posts/camp/</link>
      <pubDate>Sat, 16 Jan 2016 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/camp/</guid>
      <description>Introduction Today I released camp, a simple installer and development environment for learning modern PHP development. When I first started learning PHP, trying to get everything installed properly was really frustrating. Since then it&amp;rsquo;s gotten even more complicated. Camp is my attempt at making it simple.
It&amp;rsquo;s 2016. why can&amp;rsquo;t I just double click to install? Nearly every other languge has a one click installer. PHP links you to three different osx package managers with no indication as to which one is best, and another site that asks you to curl pipe sh without ssl and then sudo.</description>
    </item>
    
    <item>
      <title>Getting Started With PHP Streams</title>
      <link>http://mattallan.org/posts/getting-started-with-php-streams/</link>
      <pubDate>Wed, 04 Nov 2015 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/getting-started-with-php-streams/</guid>
      <description>Streams Why Use Streams Most of the time, you open files as strings, using something like file_get_contents(). This works, but PHP will load the entire file in to memory as a string. If you open a 20MB file, it&amp;rsquo;s going to consume 20MB of memory. With small files, this is convenient and it&amp;rsquo;s OK. Most PHP installations are set to use a really small amount of memory, like 64MB 1.</description>
    </item>
    
    <item>
      <title>Using composer with legacy PHP applications</title>
      <link>http://mattallan.org/posts/using_composer_with_legacy_applications/</link>
      <pubDate>Sat, 14 Feb 2015 12:00:00 -0500</pubDate>
      
      <guid>http://mattallan.org/posts/using_composer_with_legacy_applications/</guid>
      <description>Introduction Composer is a dependency manager and autoloader for PHP.
The Issue Most legacy applications do not follow a consistent standard like PSR-0 or psr-4.
Normally composer takes a classname like this:
Acme\Foo\Bar  And checks the autoload section of composer.json. If you had something like this:
{ &amp;quot;autoload&amp;quot;: { &amp;quot;psr-4&amp;quot;: { &amp;quot;Acme\\&amp;quot;: [&amp;quot;src/&amp;quot;] } } }  It would check the src folder for a file at src/Foo/Bar.php. The legacy application I work on uses folders for organization, yet namespaces are virtually nonexistent.</description>
    </item>
    
  </channel>
</rss>